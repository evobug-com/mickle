# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Flutter

permissions:
  contents: write
  discussions: write

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  prepare-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: beta
          cache: true
          # optional parameters follow
          cache-key: "flutter-:os:-:channel:-:version:-:arch:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests
        run: flutter test

  release:
    if: github.event_name == 'workflow_dispatch'
    needs: prepare-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Bump version and update files
        run: |
          # Extract current version
          CURRENT_VERSION=$(grep 'version: ' pubspec.yaml | sed 's/version: //')
          echo "Current Version: $CURRENT_VERSION"

          # Increment the patch part
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          case ${{ github.event.inputs.releaseType }} in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          echo "New Version: $NEW_VERSION"

          # Update pubspec.yml
          sed -i "s/version: $CURRENT_VERSION/version: $NEW_VERSION/g" pubspec.yaml

          # Update version.dart
          sed -i "s/const String version = 'REPLACE_ME_WITH_VERSION'/const String version = '$NEW_VERSION'/g" lib/core/version.dart

          # Export the new version to be used by other steps
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and Tag Release
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml lib/core/version.dart
          git commit -m "release: ${NEW_VERSION}"
          git tag v$NEW_VERSION
          git push --follow-tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          body: "Release $NEW_VERSION"
          draft: false
          prerelease: false
          generate_release_notes: true
          tag_name: v$NEW_VERSION

  build-windows:
    needs: prepare-and-test
    runs-on: windows-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2.16.0
        with:
          channel: beta
          cache: true
           # optional parameters follow
          cache-key: "flutter-:os:-:channel:-:version:-:arch:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path

      - name: Install dependencies
        run: flutter pub get

      - name: Build for Windows
        run: flutter build windows

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Windows Release
          path: build/windows/x64/runner/Release/
          retention-days: 1

      - name: Attach Windows Artifact to Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v2
        with:
          files: build/windows/runner/Release/*