syntax = "proto3";

package proto.src.talk.v1;

// Server sends this message to the client
message ServerMessage {
  oneof message {
    ServerLogin login = 1;
    ServerWelcomeState welcome_state = 2;
    ServerRegister register = 3;
//    ServerChannelPagination channel_pagination = 4;
//    ServerSendMessage send_message = 5;
//    ServerError error = 6;
  }
}

message ServerLogin {
  enum Status {
    None = 0;
    OK = 1;
    INVALID_CREDENTIALS = 2;
  }

  Status status = 1;
  optional string token = 2;
}

message ServerRegister {
  enum Status {
    None = 0;
    OK = 1;
    USERNAME_TAKEN = 2;
    PASSWORD_WEAK = 3;
  }

  Status status = 1;
  optional string token = 2;
}

message ServerWelcomeState {
  // TODO: Make a research on sending all data
  // One possible approach is to add "updated_at" to each data and compare the value against server
  // If server has different value then we send all related data

  message Server {
    string id = 1;
    string name = 2;

    message ServerUser {
      string server_id = 1;
      string user_id = 2;
    }
    message ServerChannel {
      string server_id = 1;
      string channel_id = 2;
    }
  }

  message Role {
    message RoleUser {
      string role_id = 1;
      string user_id = 2;
    }

    string id = 1;
    string name = 2;
    int32 color = 3;
  }

  message User {
    enum UserStatus {
      None = 0;
      ONLINE = 1;
      OFFLINE = 2;
      AWAY = 3;
      BUSY = 4;
      STREAMING = 5;
    }

    string id = 1;
    string username = 2;
    optional string first_name = 3;
    optional string last_name = 4;
    optional string display_name = 5;
    optional string avatar = 6;
    UserStatus status = 7;
    optional string text_status = 8;
  }

  message Channel {
    // TODO(perf): OneOf [Include, Exclude] and chose the one that has lower size
    // i.e.: Channel has 100 users but only 2 are excluded, so we will send just 2 users and use 98 from UserList
    string id = 1;
    string name = 2;
    optional string description = 3;

    message ChannelUser {
      string channel_id = 1;
      string user_id = 2;
    }

    message ChannelMessage {
      string channel_id = 1;
      string message_id = 2;
    }
  }

  message Message {
    string id = 1;
    string content = 2;
    uint64 timestamp = 3;
  }

  message UserList {
    repeated User users = 1;
  }

  message RoleList {
    repeated Role roles = 1;
  }

  message RoleUserList {
    repeated Role.RoleUser users = 1;
  }

  message ChannelList {
    repeated Channel channels = 1;
  }

  message ChannelUserList {
    repeated Channel.ChannelUser users = 1;
  }

  message ChannelMessageList {
    repeated Channel.ChannelMessage messages = 1;
  }

  message MessageList {
    repeated Message messages = 1;
  }

  message ServerList {
    repeated Server servers = 1;
  }

  message ServerUserList {
    repeated Server.ServerUser users = 1;
  }

  message ServerChannelList {
    repeated Server.ServerChannel channels = 1;
  }

  ServerList servers = 1;
  UserList users = 2;
  RoleList roles = 3;
  ChannelList channels = 4;
  MessageList messages = 5;
  ServerUserList server_users = 6;
  ServerChannelList server_channels = 7;
  RoleUserList role_users = 8;
  ChannelUserList channel_users = 9;
  ChannelMessageList channel_messages = 10;
  string main_server_id = 11;
}